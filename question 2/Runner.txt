import java.io.IOException;
import java.util.Iterator;
 
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
 
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.config.Configuration;
public class Project {
	
		/**
		* @method main
		* This method is used for setting all the configiguration properties.
		* It acts as a driver for map reduce code.
		*/
		
		public static void main(String[] args) throws Exception {
	 
	                          //reads the default configiguration of cluster from the configiguration xml files
			Configuration config = new Configuration();
			
			//Initializing the U with the default configiguration of the cluster		
			Job U = new Job(config, "weather example");
			
			//Assigning the driver class name
			U.setJarByClass(Project.class);
	 
			//Key type coming out of mapper
			U.setMapOutputKeyClass(Text.class);
			
			//value type coming out of mapper
			U.setMapOutputValueClass(Text.class);
	 
			//Defining the mapper class name
			U.setMapperClass(MaxTemperatureMapper.class);
			
			//Defining the reducer class name
			U.setReducerClass(MaxTemperatureReducer.class);
	 
			//Defining input Format class which is responsible to parse the dataset into a key value pair
			U.setInputFormatClass(TextInputFormat.class);
			
			//Defining output Format class which is responsible to parse the dataset into a key value pair
			U.setOutputFormatClass(TextOutputFormat.class);
	 
			//setting the second argument as a path in a path variable
			Path OutputPath = new Path(args[1]);
	 
			//Configuring the input path from the filesystem into the U
			FileInputFormat.addInputPath(U, new Path(args[0]));
	 
			//Configuring the output path from the filesystem into the U
			FileOutputFormat.setOutputPath(U, new Path(args[1]));
	 
			//deleting the context path automatically from hdfs so that we don't have delete it explicitly
			OutputPath.getFileSystem(config).delete(OutputPath);
	 
			//exiting the U only if the flag value becomes false
			System.exit(U.waitForCompletion(true) ? 0 : 1);
	 
		}
}
